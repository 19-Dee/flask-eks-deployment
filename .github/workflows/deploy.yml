name: Deploy Flask to EKS with Security Scanning

on:
  push:
    branches:
      - main # Runs when you push to main

jobs:
  sonar-scan:
    name: SonarQube Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we're on the main branch

      - name: Install SonarScanner
        run: |
          sudo apt-get update && sudo apt-get install -y unzip curl
          curl -o sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonarscanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=19-Dee_flask-eks-deployment \
            -Dsonar.organization=19-dee \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.branch.name=main \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.login=$SONAR_TOKEN

  trivy-filesystem-scan:
    name: Trivy Filesystem Security Scan
    runs-on: ubuntu-latest
    needs: sonar-scan # Runs after SonarQube scan

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version # Verify installation

      - name: Scan Source Code with Trivy
        run: |
          trivy fs . --exit-code 1 --severity CRITICAL

  build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: trivy-filesystem-scan # Ensure security scan passes

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t cloudsecdee/flask-api:latest --push .

  trivy-image-scan:
    name: Trivy Image Security Scan
    runs-on: ubuntu-latest
    needs: build-push # Runs after Docker image is built

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version # Verify installation

      - name: Scan Docker Image with Trivy
        run: |
          trivy image cloudsecdee/flask-api:latest --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed --scanners vuln

  configure-aws:
    name: Configure AWS & Update Kubeconfig
    runs-on: ubuntu-latest
    needs: trivy-image-scan # Runs after image security scan

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name flask-eks-cluster --region us-east-1

    deploy:
      name: Deploy to Kubernetes
      runs-on: ubuntu-latest
      needs: configure-aws # Runs after AWS is configured

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Configure kubeconfig for EKS
          run: |
            aws eks update-kubeconfig --name flask-eks-cluster --region us-east-1
            echo "‚úÖ Kubeconfig updated successfully."

        - name: Verify Kubernetes Connection
          run: |
            echo "üîç Checking Kubernetes cluster connectivity..."
            kubectl cluster-info
            kubectl get nodes || { echo "‚ùå Failed to get cluster nodes. Exiting."; exit 1; }
            echo "‚úÖ Kubernetes cluster is reachable."

        - name: Deploy to Kubernetes (With Retry)
          run: |
            echo "üöÄ Deploying application to Kubernetes..."
            kubectl apply --validate=false -f k8-manifests/flask-deployment.yaml || { echo "Retrying deployment..."; sleep 10; kubectl apply --validate=false -f k8-manifests/flask-deployment.yaml; }
            kubectl apply --validate=false -f k8-manifests/flask-service.yaml
            kubectl apply --validate=false -f k8-manifests/flask-ingress.yaml
            echo "‚úÖ Deployment completed successfully!"
